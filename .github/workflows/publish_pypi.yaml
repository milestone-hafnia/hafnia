name: Build and Publish Package

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      environment:
        description: 'Environment prefix (e.g. "test.pypi" or "pypi")'
        required: true
        type: string
  
jobs:
  publish-pypi:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download package artifact
        uses: actions/download-artifact@v4.2.1
        with:
          name: python-package
          path: dist/
      - name: Display package files
        run: ls -la dist/
      - name: mint API token
        id: mint-token
        run: |
          echo "Input environment: '${{ inputs.environment }}'"
          # Remove dots from the input so that "test.pypi" becomes "testpypi"
          audience=$(echo "${{ inputs.environment }}" | tr -d '.')
          echo "Using audience: ${audience}"
          
          # Retrieve the ambient OIDC token using the transformed audience.
          resp=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=${audience}")
          oidc_token=$(jq -r '.value' <<< "${resp}")
          echo "OIDC token retrieved."
          
          # Construct the mint URL using the transformed audience.
          mint_url="https://${audience}.org/_/oidc/mint-token"
          echo "Mint URL: ${mint_url}"
          
          # Exchange the OIDC token for an API token.
          resp=$(curl -s -X POST "${mint_url}" -d "{\"token\": \"${oidc_token}\"}")
          api_token=$(jq -r '.token' <<< "${resp}")
          
          # Mask the API token in logs.
          echo "::add-mask::${api_token}"
          echo "api-token=${api_token}" >> "${GITHUB_OUTPUT}"
      - name: Publish ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://${{ inputs.environment }}.pypi.org/legacy/
          print-hash: true