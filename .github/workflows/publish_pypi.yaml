name: Build and Publish Package

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      environment:
        description: 'Environment prefix (e.g. "test.pypi" or "pypi")'
        required: true
        type: string
      audience:
        description: 'OIDC tocken audience'
        required: true
        type: string

env:
  PYPI_API_URL: 'https://${{ inputs.environment }}.org/_/oidc/mint-token'
  REPOSITORY_URL: 'https://${{ inputs.environment }}.pypi.org/legacy/'
  
jobs:
  publish-pypi:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download package artifact
        uses: actions/download-artifact@v4.2.1
        with:
          name: python-package
          path: dist/

      - name: Display package files
        run: ls -la dist/

      - name: Mint API token
        id: mint-token
        run: |
          # Retrieve the ambient OIDC token
          echo "Requesting OIDC token with audience: ${{ inputs.audience }}"
          resp=$(curl -sSf -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
                "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=${{ inputs.audience }}")

          if [ $? -ne 0 ]; then
            echo "::error::Failed to retrieve OIDC token"
            exit 1
          fi
          
          oidc_token=$(jq -r '.value' <<< "${resp}")

          # Exchange the OIDC token for an API token
          echo "Exchanging OIDC token for PyPI API token"
          resp=$(curl -sSf -X POST ${PYPI_API_URL} \
                -H "Content-Type: application/json" \
                -d "{\"token\": \"${oidc_token}\"}")
                
          if [ $? -ne 0 ]; then
            echo "::error::Failed to exchange OIDC token for PyPI API token"
            exit 1
          fi
          
          api_token=$(jq -r '.token' <<< "${resp}")

          if [ -z "$api_token" ] || [ "$api_token" = "null" ]; then
            echo "::error::Received invalid API token"
            exit 1
          fi
          
          # Mask the API token to prevent accidental leakage
          echo "::add-mask::${api_token}"
          echo "api-token=${api_token}" >> "${GITHUB_OUTPUT}"
          echo "API token successfully minted"

      - name: Publish ðŸ“¦ to ${{ inputs.environment }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: ${{ env.REPOSITORY_URL }}
          print-hash: true