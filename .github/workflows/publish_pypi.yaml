name: Build and Publish Package

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment prefix (e.g. "test.pypi" or "pypi")'
        required: true
        type: string
      audience:
        description: 'OIDC tocken audience'
        required: true
        type: string
  
jobs:
  publish-pypi:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download package artifact
        uses: actions/download-artifact@v4.2.1
        with:
          name: python-package
          path: dist/

      - name: Display package files
        run: ls -la dist/

      - name: Mint API token
        id: mint-token
        env:
           PYPI_API_URL: 'https://${{ inputs.environment }}.org/_/oidc/mint-token'
        run: |
          resp=$(curl -sS -H "Authorization: bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" \
                           "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=${{ inputs.audience }}")
          oidc_token=$(jq -r '.value' <<< "${resp}")
          echo "âœ… Requesting OIDC token with audience: ${{ inputs.audience }}"

          pypi_api_json_payload="{\"token\":\"${oidc_token}\"}"
          resp=$(curl -sS -X POST ${{ env.PYPI_API_URL }} -d "$pypi_api_json_payload")
          api_token=$(jq -r '.token' <<< "${resp}")
          echo "âœ… Exchanging OIDC token for PyPI API token"

          # Mask the API token to prevent accidental leakage
          echo "::add-mask::${api_token}"
          echo "api-token=${api_token}" >> "${GITHUB_OUTPUT}"
          echo "âœ… API token successfully minted"

      - name: Publish ðŸ“¦ to ${{ inputs.environment }}
        uses: pypa/gh-action-pypi-publish@release/v1
        env:
          REPOSITORY_URL:  ${{ inputs.environment == 'test.pypi' && 'https://test.pypi.org/legacy/' || 'https://upload.pypi.org/legacy/' }}
        with:
          repository-url: https://test.pypi.org/legacy/
          print-hash: true