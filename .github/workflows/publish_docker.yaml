name: Build and Push Docker Image

on:
  workflow_call:
    inputs:
      python-version-file:
        required: true
        type: string
        
permissions:
  id-token: write
  contents: read
  
jobs:
  docker_runtime:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: actions/setup-python@v5.4.0
        with:
          python-version-file: ${{ inputs.python-version-file }}
      - name: Extract version
        id: extract-version
        run: |
          VERSION=$(python -c "import tomli; print(tomli.loads(open('pyproject.toml', 'rb').read())['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building Docker image for version: $VERSION"
      - name: Download package artifact
        uses: actions/download-artifact@v4.2.1
        with:
          name: python-package
          path: dist/
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.10.0
      - name: Build and push
        uses: docker/build-push-action@v6.15.0
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: mdi-runtime
        with:
          context: .
          file: .github/workflows/Dockerfile
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.extract-version.outputs.version }}
          platforms: linux/amd64
          provenance: false
          sbom: false
          cache-from: type=gha
          cache-to: type=gha,mode=max